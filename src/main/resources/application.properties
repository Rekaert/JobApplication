#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.hibernate.ddl-auto=update

spring.datasource.url=jdbc:postgresql://localhost:5432/jobapp
spring.datasource.username=usr
spring.datasource.password=pass
spring.jpa.database=POSTGRESQL
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

## networking between 2 containers to communicate each other
# docker network create my-network
# docker run -d --name postgresql_container -e POSTGRES_USER=user -e POSTGREs_PASSWORD=pass -e PGDATA=/data/postgres -v postgres:/data/postgres -p 5432:5432 --network postgres --restart unless-stopped postgres
# docker run -d --name pgadmin_container --network postgres -e PGADMIN_DEFAULT_EMAIL=admin@admin.com -e PGADMIN_DEFAULT_PASSWORD=pass -e PGADMIN_CONFIG_SERVER_MODE=FALSE -v pgadmin:/var/lib/pgadmin -p 5050:80 --restart unless-stopped dpage/pgadmin1
# docker exec -it pgadmin ping db

# Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

info.app.name=JobApplication
info.add.description=Spring Boot application with JPA and H2 database
info.add.version=1.0.0

management.info.env.enabled=true
management.endpoint.shutdown.enabled=true


## Docker image creation from this project after docker is running
## ./mvnw spring-boot:build-image "-Dspring-boot.build-image.imageName=username/jobappimage"
## docker login
## docker push username/jobappimage